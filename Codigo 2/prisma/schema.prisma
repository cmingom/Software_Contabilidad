// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Upload {
  id           String   @id @default(cuid())
  filename     String
  rows         Int
  importedAt   DateTime @default(now())
  facts        Fact[]
  dailyHarvest DailyHarvest[]
}

model Fact {
  id              String   @id @default(cuid())
  uploadId        String
  // Dimensiones de DATOS
  idEntrega       String?
  nombreCosecha   String?
  nombreCampo     String?
  cecoCampo       String?
  etiquetasCampo  String?
  cuartel         String?
  cecoCuartel     String?
  etiquetasCuartel String?
  especie         String?
  variedad        String?
  fecha           DateTime?
  hora            String?
  nombreTrab      String?
  idTrab          Int?
  contratista     String?
  idContratista   Int?
  etiquetasContratista String?
  envase          String?
  nroEnvases      Int      @default(0)
  pesoReal        Float    @default(0)
  pesoTeorico     Float    @default(0)
  usuario         String?
  idUsuario       Int?
  cuadrilla       String?
  credencialEntrega String?
  codigoEnvase    String?

  // Cálculo
  unitPrice       Float    @default(0)
  amount          Float    @default(0)

  upload          Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  
  @@index([idTrab, fecha])
  @@index([envase])
  @@index([nombreCampo, cuartel])
  @@index([uploadId])
}

model PriceBase {
  id        String  @id @default(cuid())
  envase    String  @unique
  price     Float
  active    Boolean @default(true)
  createdAt DateTime @default(now())
  
  // Relación opcional con PricingConfig
  configId  String?
  config    PricingConfig? @relation(fields: [configId], references: [id])
}

model PriceRule {
  id               String  @id @default(cuid())
  nombreCosecha    String?
  nombreCampo      String?
  cecoCampo        String?
  etiquetasCampo   String?
  cuartel          String?
  cecoCuartel      String?
  etiquetasCuartel String?
  especie          String?
  variedad         String?
  contratista      String?
  idContratista    Int?
  envase           String?
  usuario          String?
  idUsuario        Int?
  cuadrilla        String?
  dateStart        DateTime?
  dateEnd          DateTime?
  weekdays         Int[]

  mode             PriceMode  // OVERRIDE o DELTA (iniciar con OVERRIDE)
  amount           Float
  priority         Int

  active           Boolean @default(true)
  createdAt        DateTime @default(now())
  
  // Relación opcional con PricingConfig
  configId         String?
  config           PricingConfig? @relation(fields: [configId], references: [id])
}

model DailyHarvest {
  id              String   @id @default(cuid())
  uploadId        String
  fecha           DateTime
  nombreTrabajador String
  contratista     String
  cuartel         String
  envase          String
  cantidad        Int
  
  // Referencias
  upload          Upload   @relation(fields: [uploadId], references: [id], onDelete: Cascade)
  
  @@index([uploadId, fecha])
  @@index([envase])
  @@index([nombreTrabajador, fecha])
  @@index([contratista, cuartel])
}

model PricingConfig {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  // Relaciones
  priceBases  PriceBase[]
  priceRules  PriceRule[]
}
enum PriceMode {
  OVERRIDE
  DELTA
}

